--- a/lib/x509/verify.c	2020-03-18 23:57:13.670062295 +0800
+++ b/lib/x509/verify.c	2020-03-19 00:02:11.979759194 +0800
@@ -39,7 +39,7 @@
 #include <pk.h>
 #include "supported_exts.h"
 
-/* Checks if two certs have the same name and the same key.  Return 1 on match. 
+/* Checks if two certs have the same name and the same key.  Return 1 on match.
  * If @is_ca is zero then this function is identical to gnutls_x509_crt_equals()
  */
 unsigned
@@ -251,7 +251,7 @@
  * This does a straight (DER) compare of the issuer/subject DN fields in
  * the given certificates, as well as check the authority key ID.
  *
- * Returns 1 if they match and (0) if they don't match. 
+ * Returns 1 if they match and (0) if they don't match.
  */
 static unsigned is_issuer(gnutls_x509_crt_t cert, gnutls_x509_crt_t issuer)
 {
@@ -341,7 +341,7 @@
 	int i;
 	gnutls_x509_crt_t issuer = NULL;
 
-	/* this is serial search. 
+	/* this is serial search.
 	 */
 	for (i = 0; i < tcas_size; i++) {
 		if (is_issuer(cert, trusted_cas[i]) != 0) {
@@ -556,7 +556,7 @@
 					return gnutls_assert_val(0);
 				}
 
-				if (sigalg == GNUTLS_SIGN_ECDSA_SHA256 && 
+				if (sigalg == GNUTLS_SIGN_ECDSA_SHA256 &&
 					issuer_curve == GNUTLS_ECC_CURVE_SECP384R1) {
 					_gnutls_debug_log("SUITEB: certificate is signed with ECDSA-SHA256 when using SECP384R1\n");
 					return gnutls_assert_val(0);
@@ -591,11 +591,11 @@
 				    gnutls_x509_crt_t issuer,
 				    unsigned vflags);
 
-/* 
+/*
  * Verifies the given certificate against a certificate list of
  * trusted CAs.
  *
- * Returns only 0 or 1. If 1 it means that the certificate 
+ * Returns only 0 or 1. If 1 it means that the certificate
  * was successfully verified.
  *
  * 'flags': an OR of the gnutls_certificate_verify_flags enumeration.
@@ -667,7 +667,7 @@
 	} else {
 		if (vparams->nc != NULL) {
 			/* append the issuer's constraints */
-			ret = gnutls_x509_crt_get_name_constraints(issuer, vparams->nc, 
+			ret = gnutls_x509_crt_get_name_constraints(issuer, vparams->nc,
 				GNUTLS_NAME_CONSTRAINTS_FLAG_APPEND, NULL);
 			if (ret < 0 && ret != GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE) {
 				MARK_INVALID(GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE);
@@ -759,11 +759,17 @@
 						     issuer, flags);
 
 			if (ret == GNUTLS_E_PK_SIG_VERIFY_FAILED) {
-				MARK_INVALID(GNUTLS_CERT_SIGNATURE_FAILURE);
-			} else if (ret == GNUTLS_E_CONSTRAINT_ERROR) {
+#ifndef FUZZER_DISABLE_SIGNCHECK
+                MARK_INVALID(GNUTLS_CERT_SIGNATURE_FAILURE);
+#endif
+            } else if (ret == GNUTLS_E_CONSTRAINT_ERROR) {
+#ifndef FUZZER_DISABLE_SIGNCHECK
 				MARK_INVALID(GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE);
+#endif
 			} else if (ret < 0) {
+#ifndef FUZZER_DISABLE_SIGNCHECK
 				MARK_INVALID(0);
+#endif
 			}
 		}
 	}
@@ -849,7 +855,7 @@
  * it will check whether the certificate is self-signed.
  *
  * Returns: It will return true (1) if the given certificate is issued
- *   by the given issuer, and false (0) if not.  
+ *   by the given issuer, and false (0) if not.
  **/
 unsigned
 gnutls_x509_crt_check_issuer(gnutls_x509_crt_t cert,
@@ -1192,7 +1198,7 @@
 
 	/* check for blacklists */
 	for (i = 0; i < clist_size; i++) {
-		if (gnutls_pkcs11_crt_is_known (url, certificate_list[i], 
+		if (gnutls_pkcs11_crt_is_known (url, certificate_list[i],
 			GNUTLS_PKCS11_OBJ_FLAG_PRESENT_IN_TRUSTED_MODULE|
 			GNUTLS_PKCS11_OBJ_FLAG_RETRIEVE_DISTRUSTED) != 0) {
 			status |= GNUTLS_CERT_INVALID;
@@ -1323,7 +1329,7 @@
 
 /* verifies if the certificate is properly signed.
  * returns GNUTLS_E_PK_VERIFY_SIG_FAILED on failure and 1 on success.
- * 
+ *
  * 'data' is the signed data
  * 'signature' is the signature!
  */
@@ -1439,14 +1445,14 @@
 	if (cert_list == NULL || cert_list_length == 0)
 		return GNUTLS_E_NO_CERTIFICATE_FOUND;
 
-	/* Verify certificate 
+	/* Verify certificate
 	 */
 	*verify =
 	    _gnutls_verify_crt_status(cert_list, cert_list_length,
 					    CA_list, CA_list_length,
 					    flags, NULL, NULL);
 
-	/* Check for revoked certificates in the chain. 
+	/* Check for revoked certificates in the chain.
 	 */
 	for (i = 0; i < cert_list_length; i++) {
 		ret = gnutls_x509_crt_check_revocation(cert_list[i],
@@ -1485,7 +1491,7 @@
 		       unsigned CA_list_length, unsigned int flags,
 		       unsigned int *verify)
 {
-	/* Verify certificate 
+	/* Verify certificate
 	 */
 	*verify =
 	    _gnutls_verify_crt_status(&cert, 1,
@@ -1500,9 +1506,9 @@
  * @issuer: is the certificate of a possible issuer
  *
  * This function will check if the given CRL was issued by the given
- * issuer certificate.  
+ * issuer certificate.
  *
- * Returns: true (1) if the given CRL was issued by the given issuer, 
+ * Returns: true (1) if the given CRL was issued by the given issuer,
  * and false (0) if not.
  **/
 unsigned
@@ -1518,7 +1524,7 @@
 {
 	int i;
 
-	/* this is serial search. 
+	/* this is serial search.
 	 */
 
 	for (i = 0; i < tcas_size; i++) {
@@ -1543,8 +1549,8 @@
  * return values. Note that since GnuTLS 3.1.4 this function includes
  * the time checks.
  *
- * Note that value in @verify is set only when the return value of this 
- * function is success (i.e, failure to trust a CRL a certificate does not imply 
+ * Note that value in @verify is set only when the return value of this
+ * function is success (i.e, failure to trust a CRL a certificate does not imply
  * a negative return value).
  *
  * Before GnuTLS 3.5.7 this function would return zero or a positive
